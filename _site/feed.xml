<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-12-29T16:55:15+05:30</updated><id>http://localhost:4000/</id><title type="html">geekGirl</title><subtitle>Minimal Jekyll theme for storytellers</subtitle><author><name>Richa Sharma</name><email>richasharma1496@gmail.com</email></author><entry><title type="html">Outreachy Week 3</title><link href="http://localhost:4000/2020-12-22/outreachyblog2" rel="alternate" type="text/html" title="Outreachy Week 3" /><published>2020-12-22T00:00:00+05:30</published><updated>2020-12-22T00:00:00+05:30</updated><id>http://localhost:4000/2020-12-22/outreachyblog2</id><content type="html" xml:base="http://localhost:4000/2020-12-22/outreachyblog2">&lt;h2 id=&quot;everybody-struggles&quot;&gt;Everybody struggles&lt;/h2&gt;

&lt;h4 id=&quot;stop-focusing-on-results-and-enjoy-the-process&quot;&gt;Stop focusing on results and enjoy the process.&lt;/h4&gt;

&lt;p&gt;I haven’t had many difficulties in coding on my project yet. Maybe because I already have some experience with the languages I’m using currently for my Mozilla Container Project. However, there are many new methods and platforms I am using during the outreachy internship. Every time my mentor suggests new methods, I spend a lot of time studying them from their documentation. So I am spending time learning phabricator, mercurial and searchfox. 
As I work on larger projects in my internships, I have come to realize that knowing your tools is as important as knowing your programming languages. Tools like searchfox, mercurial, etc. make it easy to collaborate and find the way around in code.&lt;/p&gt;

&lt;p&gt;I am also learning how to write good meeting notes during weekly catch-ups. My mentors write down weekly notes which are very helpful throughout the week. This keeps the work organized and on-track.&lt;/p&gt;

&lt;p&gt;The good side of all the struggle and hard work is that we learn and get out of our comfort zone. It may sound overwhelming or scary at first, but I know deep down trying and discovering new things will eventually be worth it.
At my low points during the internship, I always tell myself that even the most experienced person felt and went through the same fight like us, although I am still a beginner at some topics, the main purpose of this internship is to learn and improve each day.&lt;/p&gt;</content><author><name>Richa</name></author><summary type="html">Everybody struggles</summary></entry><entry><title type="html">Outreachy Week 1</title><link href="http://localhost:4000/2020-12-15/outreachyblog1" rel="alternate" type="text/html" title="Outreachy Week 1" /><published>2020-12-15T00:00:00+05:30</published><updated>2020-12-15T00:00:00+05:30</updated><id>http://localhost:4000/2020-12-15/outreachyblog1</id><content type="html" xml:base="http://localhost:4000/2020-12-15/outreachyblog1">&lt;p&gt;I’m Richa, a software developer based in Delhi, India. I focus on writing clean, elegant, and efficient code. I grew up in Delhi and studied Business Administration. After working at product companies in business dev roles, I realized my heart lies in tech and building stuff. So I packed my bags and arrived in Bangalore, silicon valley of India. I am proficient in ReactJS, Javascript, and GatsbyJS. I am always eager to learn new technologies and look forward to applying them in my work. I care about performance optimization, frictionless UI, and readability in code. Outside of work I’m passionate about my family, movies and Cult.fit.&lt;/p&gt;

&lt;p&gt;Outreachy is an awesome initiative to get more women and members of other underrepresented groups involved in Free &amp;amp; Open Source Software.
Few points why I am doing Outreachy are as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Get to work in a great organization that I’ve admired for years.&lt;/li&gt;
  &lt;li&gt;Write code for an actual real-world project.&lt;/li&gt;
  &lt;li&gt;Gain confidence and feel more like a “real software developer”.&lt;/li&gt;
  &lt;li&gt;Learn more about various languages and testing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am sure I will be able to fulfill my goals and add more goals as the internship goes along. But for now, it’s just a time to sit back, relax, and work super hard all winter to achieve them!&lt;/p&gt;

&lt;p&gt;I feel core values are important because they act as a compass to help lead an amazing life that we want. Following are the top 3 core values that I follow in my daily life:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;wisdom&quot;&gt;WISDOM&lt;/h4&gt;
    &lt;p&gt;Wisdom is the mixture of knowledge and character. In simple words, wisdom is one’s knowledge of the Truth combined with his/her ability to live with the truth. 
For eg. having the knowledge that cigarette smoking is bad for your health combined with the strength of character to avoid smoking.
The more knowledge we develop about the truth and the more we develop our character practicing that particular knowledge, the more wise a person becomes. Hence, it’s a continuous cycle of improvement.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;calmness&quot;&gt;CALMNESS&lt;/h4&gt;
    &lt;p&gt;There is a popular saying that “If a person can stay calm even in hard times, you will be successful.” Therefore, staying calm allows us to think logically and take decisions accordingly. Clarity of mind is extremely important while we are dealing with any kind of problem. If our mind is free and relaxed, our clarity on thoughts will provide the solutions.
I feel staying calm during unfavorable issues will reflect our inner character and will provide a positive impression to others.  It also helps us to develop our personality as we are able to cope up with our problems patiently.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;gratitude&quot;&gt;GRATITUDE&lt;/h4&gt;
    &lt;p&gt;I feel being grateful makes one appreciate what’s already there, which reduces stress. That in turn helps the person to be more focused in decision making and creative thinking. If we express gratitude often, people are going to love helping out and will want to work with us. 
For eg: If we are looking for a mentor, that person is way more likely to stick around if we show him how grateful we are for his help. Hence, I feel gratitude is something we will see happening around us once we start doing it. Gratitude provides a powerful perspective shift whenever we feel low.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Richa</name></author><summary type="html">I’m Richa, a software developer based in Delhi, India. I focus on writing clean, elegant, and efficient code. I grew up in Delhi and studied Business Administration. After working at product companies in business dev roles, I realized my heart lies in tech and building stuff. So I packed my bags and arrived in Bangalore, silicon valley of India. I am proficient in ReactJS, Javascript, and GatsbyJS. I am always eager to learn new technologies and look forward to applying them in my work. I care about performance optimization, frictionless UI, and readability in code. Outside of work I’m passionate about my family, movies and Cult.fit.</summary></entry><entry><title type="html">Concept of Currying</title><link href="http://localhost:4000/2019-11-26/currying" rel="alternate" type="text/html" title="Concept of Currying" /><published>2019-11-26T00:00:00+05:30</published><updated>2019-11-26T00:00:00+05:30</updated><id>http://localhost:4000/2019-11-26/currying</id><content type="html" xml:base="http://localhost:4000/2019-11-26/currying">&lt;p&gt;&lt;strong&gt;“Currying is the process of turning a function with multiple arity into a function with less arity”  — Kristina Brainwave&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In simple words, currying is a method in programming in which we can transform a function with multiple arguments into a nested functions. It returns a new function that expects the next argument.&lt;/p&gt;

&lt;p&gt;So, currying transforms a function with multiple arguments into a series of functions each taking a single argument.&lt;/p&gt;

&lt;p&gt;Let’s look at a simple example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This function takes three numbers, multiplies the numbers and returns the result.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;  &lt;span class=&quot;nx&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s create a curried version of the same  function and see how we would call the same function and get the same result :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;            
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;        
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
    
    &lt;span class=&quot;nx&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 6&lt;/span&gt;

    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Above as you can see we have turned the multiply(1,2,3) function call to multiply(1)(2)(3) multiple function calls.&lt;/p&gt;

&lt;h4 id=&quot;is-currying-useful&quot;&gt;Is Currying useful?&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Avoid frequently calling a function with the same argument&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;For example, we have a function to calculate the volume of a cylinder:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It happens that all the cylinders are of height 100m.
You will see that you will repeatedly call this function with &lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;100&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 20030100&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//144000l&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To resolve this, you curry the &lt;code class=&quot;highlighter-rouge&quot;&gt;volume&lt;/code&gt; function(like we did earlier):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;            
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;        
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can define a specific function for a particular cylinder height:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CylinderHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;CylinderHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 600,000l&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;Currying is a transform that makes &lt;code class=&quot;highlighter-rouge&quot;&gt;function(a,b,c)&lt;/code&gt;  as &lt;code class=&quot;highlighter-rouge&quot;&gt;function(a)(b)(c)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Currying allows to easily get partials function. As we’ve seen in the volume example: the universal &lt;code class=&quot;highlighter-rouge&quot;&gt;function log(h, w, l)&lt;/code&gt; after currying gives us partials when called with one argument like &lt;code class=&quot;highlighter-rouge&quot;&gt;function(h)&lt;/code&gt; or two arguments &lt;code class=&quot;highlighter-rouge&quot;&gt;function(w, l)&lt;/code&gt;.&lt;/p&gt;</content><author><name>Richa</name></author><summary type="html">“Currying is the process of turning a function with multiple arity into a function with less arity” — Kristina Brainwave</summary></entry><entry><title type="html">I promise to teach you callback</title><link href="http://localhost:4000/2019-04-18/asynchandsynch" rel="alternate" type="text/html" title="I promise to teach you callback" /><published>2019-04-18T00:00:00+05:30</published><updated>2019-04-18T00:00:00+05:30</updated><id>http://localhost:4000/2019-04-18/asynchandsynch</id><content type="html" xml:base="http://localhost:4000/2019-04-18/asynchandsynch">&lt;p&gt;I was recently asked this question in an interview. I decided to get to the bottom of this.&lt;/p&gt;

&lt;p&gt;When you write code in any of the high-level languages (Python, Javascript, Scala etc.), the program execution is very straight-forward. Your program starts at the top and executes one line at a time, and the next line is executed when the previous line’s execution finishes. This is called Synchronous program execution. Each time a code block or a function is called, the program waits for until that code-block is successfully executed or until that function returns before moving to the next line of code. This is good and easy to understand but can have undesirable ramifications. Suppose if a function is time-consuming then your process is stuck while that function runs.&lt;/p&gt;

&lt;p&gt;Asynchronous execution avoids this problem. It is something like saying that let us proceed with the part of the code that doesn’t require output of the time consuming function and we will return to the functions which require the output when we do have that output, i.e we will call-back the functions dependent on the time-consuming function’s output when it has completed.&lt;/p&gt;

&lt;p&gt;This brings us to callback functions.&lt;/p&gt;

&lt;h2 id=&quot;callback-functions&quot;&gt;Callback functions&lt;/h2&gt;

&lt;p&gt;Simply put — when a function has another function as an argument, that argument function is known as a callback function. This is because that function in not directly called upon but is called-back upon when the higher order function is executed&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;    
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;introduction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    
      &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nx&quot;&gt;introduction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Chris'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Nwamba'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Hello Chris Nwamba, welcome to Scotch!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This means when we use functions with array methods like map, filter etc. those are also callback functions.&lt;/p&gt;

&lt;p&gt;But one of the main applications of callback functions we see are when we want to call the functions dependent on execution of a time-consuming main function. Adding event listeners in a browser with &lt;code class=&quot;highlighter-rouge&quot;&gt;addEventListener&lt;/code&gt;, reading files &lt;code class=&quot;highlighter-rouge&quot;&gt;fs.readFile&lt;/code&gt; are examples of common APIs that uses callbacks.&lt;/p&gt;

&lt;p&gt;Let us see an example of callback functions in action. I have used the same examples as in this very good &lt;a href=&quot;https://medium.com/codebuddies/getting-to-know-asynchronous-javascript-callbacks-promises-and-async-await-17e0673281ee&quot;&gt;blogpost by Sebastian Lindström.&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'request'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Handle error.&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Successful, do something with the result.&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;https://www.somepage.com&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The last argument of &lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt; is a callback function &lt;code class=&quot;highlighter-rouge&quot;&gt;handleResponse&lt;/code&gt;. We can also pass anonymous/arrow functions in the call directly. This function is not executed together with the code but is executed later once the underlying I/O operation is done.&lt;/p&gt;

&lt;p&gt;This is all neat and tidy. But what if we want to do multiple operations with the data and based on the data received might want to fetch more data. Again I will use the example for the &lt;a href=&quot;https://medium.com/codebuddies/getting-to-know-asynchronous-javascript-callbacks-promises-and-async-await-17e0673281ee&quot;&gt;same blogpost&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;http://www.somepage.com&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Handle error.&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'http://www.somepage.com/${firstBody.someValue}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;secondError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secondResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secondBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;secondError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// Handle error.&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// Use secondBody for something&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What we see above is a nested callback code block. This soon gets messy and is popularly called callback hell. This has been discussed at length here, here and here.&lt;/p&gt;

&lt;p&gt;How do we get out of this?&lt;/p&gt;

&lt;h1 id=&quot;promises&quot;&gt;Promises&lt;/h1&gt;

&lt;p&gt;A promise is an asynchronous operation that may complete at some point and produce a value. It is exported as a new kind of object in Javascript that wraps an async operation and notifies when it’s done.&lt;/p&gt;

&lt;p&gt;Instead of passing another function which will be called back, promise object has a new interface which gives you option to write the callback functions succinctly inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; tags and reads much better than the nested callback code blocks.&lt;/p&gt;

&lt;p&gt;It is easier to understand with an example, let us borrow another one from &lt;a href=&quot;https://medium.com/codebuddies/getting-to-know-asynchronous-javascript-callbacks-promises-and-async-await-17e0673281ee&quot;&gt;the blogpost&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'axios'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;http://www.somepage.com&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Reponse being the result of the first request&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Returns another promise to the next .then(..) in the chain&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'http://www.somepage.com/${response.someValue}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Reponse being the result of the second request&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Handle response&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Handle error.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So the above code blocks achieves the same output as the one with nested callbacks but is much easy to read, follow and debug. Crux of the matter is that a nested callback code-block can be transformed to a chain of &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt; tags when writing with promises.&lt;/p&gt;

&lt;p&gt;Couple of points to highlight:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Code in each &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt; tag is executed when either the request has finished or the previous &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt; tag has finished execution;&lt;/li&gt;
  &lt;li&gt;There is only one &lt;code class=&quot;highlighter-rouge&quot;&gt;catch()&lt;/code&gt; to handle errors from all &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt; calls;&lt;/li&gt;
  &lt;li&gt;Every &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt; call should return a new Promise object or a value.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we understand how &lt;code class=&quot;highlighter-rouge&quot;&gt;Promises&lt;/code&gt; work and how they can be used to replace callbacks. In another post I would try to explain how to create new promise objects and also modify callback based API calls to work with &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;Ta-da!&lt;/p&gt;</content><author><name>Richa</name></author><summary type="html">I was recently asked this question in an interview. I decided to get to the bottom of this.</summary></entry><entry><title type="html">Case Study on Web Performance Optimization</title><link href="http://localhost:4000/2019-03-23/casestudy1" rel="alternate" type="text/html" title="Case Study on Web Performance Optimization" /><published>2019-03-23T00:00:00+05:30</published><updated>2019-03-23T00:00:00+05:30</updated><id>http://localhost:4000/2019-03-23/casestudy1</id><content type="html" xml:base="http://localhost:4000/2019-03-23/casestudy1">&lt;p&gt;Recently, I completed Web perfomance optimization course from udacity to make things more clear in my head I analysed the &lt;a href=&quot;https://webcompat.com/&quot;&gt;webcompat.com&lt;/a&gt;. 
Webcompat is an add-on feature which helps in reporting any bug in a website.&lt;/p&gt;

&lt;p&gt;As part of my analysis I consulted &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/&quot;&gt;Lighthouse&lt;/a&gt; and &lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/&quot;&gt;Pagespeed Insights&lt;/a&gt; to measure performance of www.webcompat.com. 
I have noted down my findings based on each resource under a different heading. I have also included a list of fixes wherever it was possible for me to suggest an optimization. 
I have also made some changes and pushed on my own fork of the code to check how the resolution of some of the issues would look like.&lt;/p&gt;

&lt;h2 id=&quot;analysis-of-lighthouse-reports-chrome-web-dev-tool&quot;&gt;Analysis of Lighthouse reports (Chrome web-dev tool)&lt;/h2&gt;

&lt;h3 id=&quot;speed-and-related-metrics&quot;&gt;Speed and related metrics&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;First contentful paint (FCP) 
Marks the point after navigation when the browser renders first bit of content from DOM; for users it provides feedback that page is loading&lt;/li&gt;
  &lt;li&gt;First meaningful paint (FMP) 
Marks the point when the most important (above-the-fold) content has been rendered and webfonts have loaded&lt;/li&gt;
  &lt;li&gt;Time to interactive (TTI) 
Marks the time it takes for a page to become interactive, essentially – page has displayed useful content, event handlers are registered and page responds to user interaction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Large difference in FCP b/w Localhost and Live version&lt;/em&gt;
On investigating the reports attached in the below comment, I see that there is a significant difference in FCP, FMP etc between localhost and live website. This is primarily because in the localhost the server doesn’t serve compressed test resources and doesn’t load minified JS. These two issues are not present in the live version of the site.&lt;/p&gt;

&lt;h4 id=&quot;issues-in-live-version&quot;&gt;Issues in Live version&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;An issue which is present in both the versions is the wait-time for render blocking resources.
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Essentially components like google.fonts is preventing rendering of the website before this resource is fetched. 
Here I see that in layout.html we are linking – href= https://fonts.googleapis.com/css?family=Open+Sans:400,600|Source+Sans+Pro:300,400|PT+Mono 
 To prevent this from blocking the rendering I used style element inside the body to load the fonts asynchronously. This helps with reducing the FCP, FMP and TTI by shaving off 0.4s on my localhost Lighthouse reports. One issue of this approach is that users might face FOUC (flash of unstyled content) while the fonts are still being loaded and can see a flicker. Some discussion on this: https://stackoverflow.com/questions/25230264/how-to-keep-css-from-render-blocking-my-website&lt;/p&gt;

        &lt;p&gt;I have created a new branch (LoadFontAsynch) on my fork and we can see the code changes at: https://github.com/14Richa/webcompat.com/tree/LoadFontAsynch&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;webcompat.min.css is also a render blocking resource according to the Lighthouse reports. In order to remove/reduce the rendering time we can use critical CSS (above the fold) in in-line fashion and load non-critical CSS asynchronously.&lt;/p&gt;

        &lt;p&gt;I have found a nice collection of resources which I can explore to address this issue: https://github.com/addyosmani/critical-path-css-tools&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Unused CSS rules: webcompat.min.css has some unused rules which can be removed to further increase performance. [&lt;code class=&quot;highlighter-rouge&quot;&gt;Homepage&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Issuelist&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Issuepage&lt;/code&gt;]
On reading more on this I find some tools mentioned &lt;a href=&quot;https://stackoverflow.com/questions/135657/how-to-identify-unused-css-definitions&quot;&gt;here&lt;/a&gt; would be helpful to find the unused css rules. 
Chrome web-dev tools also has a coverage option which checks for unused CSS/JS. More details: https://stackoverflow.com/questions/135657/how-to-identify-unused-css-definitions&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Making text visible during webfont load using font-display CSS feature. [&lt;code class=&quot;highlighter-rouge&quot;&gt;Homepage&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Issuelist&lt;/code&gt;] We can use font-display attribute to change fallback logic or decrease block time of the fonts to display the fonts.
More details: https://developers.google.com/web/updates/2016/02/font-display&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Excessive DOM Size –&amp;gt; This issue is present in &lt;code class=&quot;highlighter-rouge&quot;&gt;Issueslist&lt;/code&gt; page where it lists many issues in one page. 
This creates ~1100 nodes in the DOM tree. From what I understand, we can take a look at nodes which are displayed when the page loads and send only these nodes at first call, can render other nodes on user’s gesture. [&lt;code class=&quot;highlighter-rouge&quot;&gt;Issuelist&lt;/code&gt;]&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;best-practices-flaws&quot;&gt;Best Practices flaws&lt;/h4&gt;
&lt;p&gt;Some best practices flaws identified by Lighthouse&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Using http/2 for all resources
webcompat.com is currently hosted on nginx/1.1.19. We would need to upgrade it to nginx/1.9.5 atleast to be compatible with http/2. Since we already serve all our resources with https we satisfy the prerequisites there. In the comments I have added the protocol information for the resources served on the &lt;code class=&quot;highlighter-rouge&quot;&gt;homepage&lt;/code&gt;. It should be easy to migrate the resources served using spydy to http/2 since http/2 was built on top of spydy. &lt;a href=&quot;https://www.nginx.com/blog/http2-module-nginx/&quot;&gt;Here&lt;/a&gt; is a nginx tutorial on how to port/upgrade servers to http/2&lt;/li&gt;
  &lt;li&gt;Twitter, Github links have target = “_blank”. This can impact performance in general because the linked url can execute a javascript on our page. I found though that linked url here were generally twitter and github links. I have created a branch where I added &lt;code class=&quot;highlighter-rouge&quot;&gt;rel=noopener&lt;/code&gt; as suggested &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/noopener&quot;&gt;here&lt;/a&gt;. Performance benefits explained &lt;a href=&quot;https://jakearchibald.com/2016/performance-benefits-of-rel-noopener/&quot;&gt;here&lt;/a&gt;. Finally here is a &lt;a href=&quot;https://github.com/14Richa/webcompat.com/commit/2ad3a6466caf852bce863ac6b7b7c229f67eb974&quot;&gt;link to my code changes for review&lt;/a&gt;. Locally testing it improved the score in Lighthouse reports.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;analysis-of-pagespeed-insights&quot;&gt;Analysis of Pagespeed Insights&lt;/h2&gt;
&lt;p&gt;Pagespeed is another google-supported tool used to understand which resources/best-practices can be checked into while understanding website performance. I have listed down somethings which I want to try to improve rendering performance of webcompat.com&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Browser caching for resources like needs-triage and google-analytics. &lt;code class=&quot;highlighter-rouge&quot;&gt;Homepage&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Issuelist&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Minimizing all JS resources. For example: ga.js file is not fetched in a minified version. &lt;code class=&quot;highlighter-rouge&quot;&gt;Homepage&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Issuepage&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Removing render-blocking JS. issue-list.mi.js and wecompat.min.js are render blocking JS files. Maybe we can make an async call to these to improve performance. &lt;code class=&quot;highlighter-rouge&quot;&gt;Issuelist&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Issuepage&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;All-above-the-fold content could not be rendered with one html response. We can try to organize the content in a different way so that the visible portion of the content can be passed in one html response and we can add remaining content in multiple requests. This will improve above-the-fold rendering time. More details &lt;a href=&quot;https://developers.google.com/speed/docs/insights/PrioritizeVisibleContent&quot;&gt;here&lt;/a&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;IssueList&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Richa</name></author><summary type="html">Recently, I completed Web perfomance optimization course from udacity to make things more clear in my head I analysed the webcompat.com. Webcompat is an add-on feature which helps in reporting any bug in a website.</summary></entry><entry><title type="html">Introduction to React</title><link href="http://localhost:4000/2018-11-09/introduction-to-react" rel="alternate" type="text/html" title="Introduction to React" /><published>2018-11-09T00:00:00+05:30</published><updated>2018-11-09T00:00:00+05:30</updated><id>http://localhost:4000/2018-11-09/introduction%20to%20react</id><content type="html" xml:base="http://localhost:4000/2018-11-09/introduction-to-react">&lt;p&gt;React is a JavaScript library that helps in making the task of building powerful and complicated user interfaces easy.&lt;/p&gt;

&lt;p&gt;It reduces the re-rendering of the DOM by using the concept of Virtual DOM.&lt;/p&gt;

&lt;p&gt;React can be used to develop single page web applications and mobile applications.&lt;/p&gt;

&lt;p&gt;It was built by Facebook to solve some of the challenges associated with large-scale and data-driven websites. React was released in 2013.&lt;/p&gt;

&lt;p&gt;Some of the daily-used app which are built on react are Netflix, Yahoo, Facebook, Instagram WhatsApp, and Uber.&lt;/p&gt;</content><author><name>Richa</name></author><summary type="html">React is a JavaScript library that helps in making the task of building powerful and complicated user interfaces easy.</summary></entry><entry><title type="html">Classes v/s Id’s</title><link href="http://localhost:4000/2018-10-28/classes-and-id" rel="alternate" type="text/html" title="Classes v/s Id's" /><published>2018-10-28T00:00:00+05:30</published><updated>2018-10-28T00:00:00+05:30</updated><id>http://localhost:4000/2018-10-28/classes%20and%20id</id><content type="html" xml:base="http://localhost:4000/2018-10-28/classes-and-id">&lt;h2 id=&quot;classes-are-not-unique&quot;&gt;Classes are NOT unique&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;You can use the same class on multiple elements.&lt;/li&gt;
  &lt;li&gt;You can use multiple classes on the same element.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Any styling information that needs to be applied to multiple objects on a page should be done with a class. Take for example a page with multiple “widgets”:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;widget&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;widget&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;widget&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can now use the class name “widget” as your hook to apply the same set of styling to each one of these. But what if you need one of them to be bigger than the other, but still share all the other attributes? Classes has you covered there, as you can apply more than one class:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;widget&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;widget big&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;widget&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;No need to make a brand new class name here, just apply a new class right in the class attribute.&lt;/p&gt;

&lt;h2 id=&quot;ids-are-unique&quot;&gt;Id’s are unique&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Each element can have only one ID&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Each page can have only one element with that ID&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When I was first learning this stuff, I heard over and over that you should only use ID’s once, but you can use classes over and over.  If you are purely an HTML/CSS person, this attitude can continue because to you, they really don’t seem to do anything different.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Your code will not pass validation if you use the same ID on more than one element.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;elements-can-have-both&quot;&gt;Elements can have BOTH&lt;/h2&gt;

&lt;p&gt;There is nothing stopping you from having both an ID and a Class on a single element. In fact, it is often a very good idea.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;li id=&quot;comment&quot; class=&quot;item&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It has a class applied to it that you may want for styling all comments on the page, but it also has a unique ID value. This ID value is useful for direct linking.&lt;/p&gt;

&lt;p&gt;Now, I can link directly to a particular comment on a particular page easily.&lt;/p&gt;

&lt;h2 id=&quot;css-doesnt-care&quot;&gt;CSS doesn’t care&lt;/h2&gt;

&lt;p&gt;Regarding CSS, there is nothing you can do with an ID that you can’t do with a Class and vice versa. I remember when I was first learning CSS and I was having a problem, sometimes I would try and troubleshoot by switching around these values. Nope. CSS doesn’t care.&lt;/p&gt;

&lt;h2 id=&quot;javascript-cares&quot;&gt;JavaScript cares&lt;/h2&gt;

&lt;p&gt;JavaScript people are already probably more in tune with the differences between classes and ID’s. JavaScript depends on there being only one page element with any particular id, or else the commonly used &lt;code class=&quot;highlighter-rouge&quot;&gt;(getElementByIdfunction)&lt;/code&gt; wouldn’t be dependable.&lt;/p&gt;</content><author><name>Richa</name></author><summary type="html">Classes are NOT unique</summary></entry><entry><title type="html">How to write a Clean Code?</title><link href="http://localhost:4000/2018-10-26/clean-code" rel="alternate" type="text/html" title="How to write a Clean Code?" /><published>2018-10-26T00:00:00+05:30</published><updated>2018-10-26T00:00:00+05:30</updated><id>http://localhost:4000/2018-10-26/clean%20code</id><content type="html" xml:base="http://localhost:4000/2018-10-26/clean-code">&lt;p&gt;There are two things - Programming and Good Programming.&lt;/p&gt;

&lt;p&gt;Programming is what we all have been doing. Now, is the time to do good programming. 
We all know that even the bad code works. But it takes time and real hard work to make a program good and presentable. Moreover, other developers tease you when they are not able to find what all is happening in your code.&lt;/p&gt;

&lt;p&gt;This blog will give you a lot of knowledge on what are the best practises and how to actually write code.&lt;/p&gt;

&lt;p&gt;Though I myself make great effort to better my code every single day. :p&lt;/p&gt;

&lt;p&gt;I hope after reading this blog you can become a good and sorted programmer.:smiley:&lt;/p&gt;

&lt;h2 id=&quot;characteristics-of-a-clean-code-&quot;&gt;Characteristics of a Clean code :&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;A code should be elegant.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Code should be pleasing to read. Reading it should make you  smile the way a well-  crafted music box or well-designed car would.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Code should be focused - each function, each class should represent a single-minded attitude that remains entirely undistracted by the surrounding details.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;A code should not contain any duplication.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;meaningful-names&quot;&gt;Meaningful Names&lt;/h2&gt;

&lt;p&gt;A good coder shoul use intention revealing names. Choosing good names takes time but saves more than it takes. The name of a variable, function, or class, should answer all the big questions. It should tell a person or other programmer why it exists, what it does, and how it is used.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If a name requires a comment, then the name does not reveal its intent.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;class-names&quot;&gt;Class Names &lt;/h3&gt;

&lt;p&gt; Classes and objects should have noun or noun phrase names like Customer,  and AddressParser. A good coder should avoid words like Manager, Processor, Data, or Info in the name of a class. A class name should not be a verb.&lt;/p&gt;</content><author><name>Richa</name></author><summary type="html">There are two things - Programming and Good Programming.</summary></entry><entry><title type="html">Git has been Got</title><link href="http://localhost:4000/2018-10-01/git" rel="alternate" type="text/html" title="Git has been Got" /><published>2018-10-01T00:00:00+05:30</published><updated>2018-10-01T00:00:00+05:30</updated><id>http://localhost:4000/2018-10-01/git</id><content type="html" xml:base="http://localhost:4000/2018-10-01/git">&lt;p&gt;GIT is a tracking system of codes for web developer or software engineer made by the creator of Linux. It includes multiple directories that continuously changes as codes are added throughout website development. Git also tracks the performance of the codes on the stored data. To use GIT we have to use the terminal.&lt;/p&gt;

&lt;p&gt;So, if you are new to git, too, follow the following few steps below to get familiar in  making changes to the code base, making a pull request, and merging code into the master branch.&lt;/p&gt;

&lt;h3 id=&quot;step---1--install-git-and-create-a-github-account&quot;&gt;STEP - 1 : Install git and create a GitHub account&lt;/h3&gt;

&lt;p&gt;The first thing anyone who is beginning GIT has to install git and create a free GitHub account.&lt;/p&gt;

&lt;h3 id=&quot;step---2--create-a-local-git-repository&quot;&gt;STEP - 2 : Create a local GIT repository&lt;/h3&gt;

&lt;p&gt;When creating a new project on your  machine using git, you’ll first have to create a new repository.&lt;/p&gt;

&lt;p&gt;Now, open a terminal and move to where you want to place the project on your local machine using the &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; (change directory) command. Then, using &lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt; command  initialize a git repository in the main folder or the root folder.&lt;/p&gt;

&lt;h3 id=&quot;step---3--add-a-new-file-to-the-repository-or-modify-file-in-the-existing-folder-itself&quot;&gt;STEP - 3 : Add a new file to the repository or modify file in the existing folder itself&lt;/h3&gt;

&lt;p&gt;Once you’ve added a file or modified files in a folder containing a git repository, GIT will notice that changes have been made inside the repository but it will not officially keep track of the file.&lt;/p&gt;

&lt;p&gt;After creating the new file, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; command to see which files is being modified or added.&lt;/p&gt;

&lt;h3 id=&quot;step---4--add-a-file-to-git&quot;&gt;STEP - 4 : Add a file to GIT&lt;/h3&gt;

&lt;p&gt;Add a file to GIT using the &lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt; command.&lt;/p&gt;

&lt;h3 id=&quot;step---5---create-a-commit&quot;&gt;STEP - 5 :  Create a commit&lt;/h3&gt;

&lt;p&gt;It’s time to create first commit!!&lt;/p&gt;

&lt;p&gt;Run the command  &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot; Your message. &quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The message at the end of the commit should be something related to what you have done in the file or added some file. That makes the other web developer who see your commit understand your commit and code more clear.&lt;/p&gt;

&lt;h3 id=&quot;step---6--push-all-the-changes-to-the-github-account&quot;&gt;STEP - 6 : Push all the changes to the GitHub Account&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin&lt;/code&gt; command will push changes from all local branches to the master branch.&lt;/p&gt;

&lt;h2 id=&quot;concept-of-branching-in-git&quot;&gt;Concept of Branching in GIT&lt;/h2&gt;

&lt;p&gt;Branches are used to develop features in a website far away from each other. The master branch is the “default” branch when developer create a repository. Developer uses other branches for the development and merge them back to the master branch upon completion.&lt;/p&gt;

&lt;h3 id=&quot;main-commands-used-in-the-branching&quot;&gt;Main commands used in the Branching&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;To create a new branch named “branch1” and switch to it we use - &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout -b branch1&lt;/code&gt;   command.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To switch back to master we use - &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout master&lt;/code&gt; command.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To delete a branch we use - &lt;code class=&quot;highlighter-rouge&quot;&gt;git branch -d branch1&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Remember, a branch is not available to others unless we push the branch to our remote 
repository. To push the branch to remote repository we use - &lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin &amp;lt;branch&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Richa</name></author><summary type="html">GIT is a tracking system of codes for web developer or software engineer made by the creator of Linux. It includes multiple directories that continuously changes as codes are added throughout website development. Git also tracks the performance of the codes on the stored data. To use GIT we have to use the terminal.</summary></entry><entry><title type="html">Passing value or reference??</title><link href="http://localhost:4000/2018-09-30/pass-by-valandref" rel="alternate" type="text/html" title="Passing value or reference??" /><published>2018-09-30T00:00:00+05:30</published><updated>2018-09-30T00:00:00+05:30</updated><id>http://localhost:4000/2018-09-30/pass-by-valandref</id><content type="html" xml:base="http://localhost:4000/2018-09-30/pass-by-valandref">&lt;p&gt;A little introduction on pass by value v/s pass by reference.&lt;/p&gt;

&lt;h1 id=&quot;pass-by-value&quot;&gt;Pass By Value&lt;/h1&gt;

&lt;p&gt;In Pass by Value, functions are called directly by passing the value of the variable in the form of argument.&lt;/p&gt;

&lt;p&gt;If programmer changes the argument inside the function it doesn’t affect the variable which is globally passes or is outside the function.&lt;/p&gt;

&lt;p&gt;Javascript often pass by value,  so if someone changes the value of the variable; the basic or primary value will not get changed (String or number).&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;idea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ideaOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ideaTwo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Inside the idea function&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Inside the idea function&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ideaOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;340&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ideaTwo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;140&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ideaOne =&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ideaOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ideaTwo =&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ideaTwo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ideaOne = 340 ideaTwo = 140&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ideaOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ideaTwo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ideaOne =&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ideaOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ideaTwo =&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ideaTwo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ideaOne = 300; ideaTwo = 200&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;idea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ideaOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ideaTwo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;// Inside the idea function&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ideaOne = 340 ideaTwo = 140&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ideaOne =&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ideaOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ideaTwo =&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ideaTwo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ideaOne = 300; ideaTwo = 200&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;pass-by-reference&quot;&gt;Pass By Reference&lt;/h1&gt;

&lt;p&gt;Basics data types in Javascript like number, string and boolean  pass by value whereas data types like objects and arrays are pass by reference.&lt;/p&gt;

&lt;p&gt;In Pass by Reference, functions are called by directly passing the address of the variable as the argument. Changing the argument inside the function affects the variable which is passed from outside the function.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;idea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ideaObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Inside the idea function&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Inside the idea function&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ideaObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ideaObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// { x : 250 }&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ideaObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ideaObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// { x : 200 }&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;idea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ideaObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Inside the idea function&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// { x : 250 }&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ideaObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// { x : 250 };&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>Richa</name></author><summary type="html">A little introduction on pass by value v/s pass by reference.</summary></entry></feed>